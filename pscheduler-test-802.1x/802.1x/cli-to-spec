#!/usr/bin/env python3
#
# Convert comamnd-line options to a test specification
#


import pscheduler
import sys


if len(sys.argv) > 1:
    # Args are on the command line
    args = sys.argv[1:]

else:
    # xArgs are in a JSON array on stdin
    json_args = pscheduler.json_load(exit_on_error=True)
    args = []

    if type(json_args) != list:
        pscheduler.fail("Invalid JSON for this operation")
    for arg in json_args:
        if type(arg) not in (str, int, float):
            pscheduler.fail("Invalid JSON for this operation")
        args = [str(arg) for arg in json_args]


# Gargle the arguments

opt_parser = pscheduler.FailingOptionParser(epilog=
"""Examples:

  task 802.1x --interface eth0 --eap_type PEAP --username test --password test --eap_type PEAP
      Run a PEAP authentisation with test/test as credentials and use eth0 as a wired interface.
"""
)

opt_parser.add_option("--timeout",
                      help="Duration of idle test.",
                      action="store", type="string",
                      dest="timeout")

opt_parser.add_option("--interface",
                      help="Interface to use",
                      action="store", type="string",
                      dest="interface")

opt_parser.add_option("--eap_type",
                      help="EAP type to use",
                      action="store", type="string",
                      dest="eap_type")

opt_parser.add_option("--username",
                      help="Username",
                      action="store", type="string",
                      dest="username")

opt_parser.add_option("--password",
                      help="Password",
                      action="store", type="string",
                      dest="password")

opt_parser.add_option("--auth_inner",
                      help="Inner authentication, optional",
                      action="store", type="string",
                      dest="auth_inner")

opt_parser.add_option("--auth_outer",
                      help="Outer authentication, optional",
                      action="store", type="string",
                      dest="auth_outer")

(options, remaining_args) = opt_parser.parse_args(args)

if len(remaining_args) != 0:
    pscheduler.fail("Unusable arguments: %s" % " ".join(remaining_args))


result = {'schema': 1}

if options.timeout is not None:
    result['timeout'] = options.timeout

if options.interface is not None:
    result['interface'] = options.interface

if options.eap_type is not None:
    result['eap_type'] = options.eap_type

if options.username is not None:
    result['username'] = options.username

if options.password is not None:
    result['password'] = options.password

if options.auth_inner is not None:
    result['auth_inner'] = options.auth_inner

if options.auth_outer is not None:
    result['auth_outer'] = options.auth_outer

pscheduler.succeed_json(result)
