#!/usr/bin/env python3
#
# Format a spec
#

import jsontemplate
import pscheduler
import sys

from validate import spec_is_valid


try:
    format = sys.argv[1]
except IndexError:
    format = 'text/plain'


json = pscheduler.json_load(exit_on_error=True, max_schema=1)

valid, message = spec_is_valid(json)

if not valid:
    pscheduler.fail(message)


if format == 'text/plain':
    template = """
Interface .. {.section interface}{interface}{.or}Not Specified{.end}
EAP Type ... {.section eap_type}{eap_type}{.or}Not Specified{.end}
Username ... {.section username}{username}{.or}Not Specified{.end}
Password ... {.section password}{password}{.or}Not Specified{.end}
Timeout .... {.section timeout}{timeout}{.or}Not specified{.end}
"""

elif format == 'text/html':
    template = """
<table>
<tr><td>Interface</td><td>{.section interface}{interface}{.or}Not Specified{.end}</td></tr>
<tr><td>EAP type</td><td>{.section eap_type}{eap_type}{.or}Not Specified{.end}</td></tr>
<tr><td>Username</td><td>{.section username}{username}{.or}Not Specified{.end}</td></tr>
<tr><td>Password</td><td>{.section password}{password}{.or}Not Specified{.end}</td></tr>
<tr><td>Timeout</td><td>{.section timeout}{timeout}{.or}Not Specified{.end}</td></tr>
</table>
   """

else:
    pscheduler.fail("Unsupported format '%s'" % format)


# TODO: Should probably handle exceptions in a nicer way.
print(jsontemplate.expand(template, json).strip())
